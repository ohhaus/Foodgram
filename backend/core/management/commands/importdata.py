import csv
import json
import os
from typing import Dict, Type

from core.management.commands.baseimport import BaseImportCommand, FILE_DIR
from django.core.management.base import CommandParser, CommandError
from django.db import models
from recipes.models import Ingredient, Tag


class Command(BaseImportCommand):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."""

    help = '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV/JSON —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞'

    files: Dict[str, Type[models.Model]] = {
        'ingredients.csv': Ingredient,
        'tags.csv': Tag,
        'ingredients.json': Ingredient,
        'tags.json': Tag,
    }

    def add_arguments(self, parser: CommandParser):
        parser.add_argument(
            '--format',
            choices=['json', 'csv', 'all'],
            default='all',
            help='–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: json, csv, all (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'
        )
        parser.add_argument(
            '--files',
            nargs='+',
            help='–°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
        )

    def handle(self, *args, **options):
        files_to_process = self.get_files_to_process(options)

        for file_name, model in files_to_process.items():
            file_path = os.path.join(FILE_DIR, file_name)
            self.stdout.write(f'üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}')

            try:
                if not os.path.exists(file_path):
                    raise FileNotFoundError('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')

                data = self.load_data(file_path)
                if not isinstance(data, list):
                    raise TypeError('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤')

                self.import_data(model, data)
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π '
                        f'–¥–ª—è {model.__name__} –∏–∑ {file_name}'
                    )
                )

            except Exception as e:
                raise CommandError(
                    f'‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_name}: {e}'
                ) from e

    def get_files_to_process(self, options) -> Dict[str, Type[models.Model]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        selected_files = {}

        if options['files']:
            for file_name in options['files']:
                if file_name in self.files:
                    selected_files[file_name] = self.files[file_name]
                else:
                    self.stdout.write(self.style.WARNING(
                        f'‚ö†Ô∏è –§–∞–π–ª "{file_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.'
                    ))
            return selected_files

        file_format = options['format']
        for file_name, model in self.files.items():
            if file_format == 'all':
                selected_files[file_name] = model
            elif file_format == 'json' and file_name.endswith('.json'):
                selected_files[file_name] = model
            elif file_format == 'csv' and file_name.endswith('.csv'):
                selected_files[file_name] = model

        return selected_files

    def load_data(self, file_path: str) -> list[dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
        if file_path.endswith('.csv'):
            return self.load_csv(file_path)
        elif file_path.endswith('.json'):
            return self.load_json(file_path)
        raise ValueError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞')

    def load_csv(self, file_path: str) -> list[dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, encoding='utf-8') as f:
                return list(csv.DictReader(f))
        except (OSError, csv.Error) as e:
            raise ValueError(f'–û—à–∏–±–∫–∞ CSV: {e}') from e

    def load_json(self, file_path: str) -> list[dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, encoding='utf-8') as f:
                data = json.load(f)
                if not isinstance(data, list):
                    raise TypeError('JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤')
                return data
        except (OSError, json.JSONDecodeError) as e:
            raise ValueError(f'–û—à–∏–±–∫–∞ JSON: {e}') from e

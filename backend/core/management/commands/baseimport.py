import os
from abc import ABC, abstractmethod
from typing import Any

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError
from django.db import models

FILE_DIR = os.path.join(settings.BASE_DIR, 'data')


class BaseImportCommand(BaseCommand, ABC):
    """–ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –ë–î."""

    help = '–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤.'
    files = {}

    def handle(self, *args, **options):
        for file_name, model in self.files.items():
            file_path = os.path.join(FILE_DIR, file_name)
            self.stdout.write(f'üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}')

            try:
                if not os.path.exists(file_path):
                    raise FileNotFoundError('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')

                data = self.load_data(file_path)
                if not isinstance(data, list):
                    raise TypeError('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤')

                self.import_data(model, data)
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π '
                        f'–¥–ª—è {model.__name__} –∏–∑ {file_name}'
                    )
                )

            except Exception as e:
                raise CommandError(
                    f'‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_name}: {e}'
                ) from e

    def import_data(self, model: type[models.Model], data: list[dict]):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–¥–µ–ª—å."""
        required_fields = self.get_required_fields(model)

        for item in data:
            cleaned_data = self.clean_item_data(item)
            self.validate_fields(cleaned_data, required_fields, model.__name__)

            obj, created = model.objects.get_or_create(**cleaned_data)
            status = '–°–æ–∑–¥–∞–Ω' if created else '–û–±–Ω–æ–≤–ª–µ–Ω'
            self.stdout.write(f'  {status}: {obj}')

    def clean_item_data(self, item_data: dict) -> dict:
        """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º."""
        return {
            key: value.strip() if isinstance(value, str) else value
            for key, value in item_data.items()
        }

    def get_required_fields(self, model: type[models.Model]) -> list[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏."""
        return [
            field.name
            for field in model._meta.fields
            if not field.blank and not field.null and not field.auto_created
        ]

    def validate_fields(
        self, data: dict, required_fields: list[str], model_name: str
    ):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π."""
        missing = [field for field in required_fields if field not in data]
        if missing:
            raise ValueError(
                f'–î–ª—è –º–æ–¥–µ–ª–∏ {model_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: '
                f'{", ".join(missing)}'
            )

    @abstractmethod
    def load_data(self, file_path: str) -> list[dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö)."""
        raise NotImplementedError
